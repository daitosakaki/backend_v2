const mongoose = require('mongoose');
const ApiError = require('../utils/ApiError');
const config = require('../config'); // Ortam deÄŸiÅŸkenlerini (env) kontrol etmek iÃ§in

/**
 * Mongoose'un CastError'Ä±nÄ± (Ã¶rn: geÃ§ersiz ObjectId) daha anlaÅŸÄ±lÄ±r bir ApiError'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
 * @param {mongoose.Error.CastError} err
 * @returns {ApiError}
 */
const handleCastErrorDB = (err) => {
    const message = `GeÃ§ersiz ${err.path}: ${err.value}.`;
    return new ApiError(400, message);
};

/**
 * Mongoose'un DuplicateFields hatasÄ±nÄ± (unique alanlarÄ±n tekrarÄ±) daha anlaÅŸÄ±lÄ±r bir ApiError'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
 * @param {Error} err
 * @returns {ApiError}
 */
const handleDuplicateFieldsDB = (err) => {
    const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
    const message = `${value} deÄŸeri daha Ã¶nceden alÄ±nmÄ±ÅŸ. LÃ¼tfen baÅŸka bir deÄŸer deneyin.`;
    return new ApiError(400, message);
};

/**
 * Mongoose'un ValidationError'Ä±nÄ± (ÅŸema doÄŸrulama hatalarÄ±) daha anlaÅŸÄ±lÄ±r bir ApiError'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
 * @param {mongoose.Error.ValidationError} err
 * @returns {ApiError}
 */
const handleValidationErrorDB = (err) => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `GeÃ§ersiz giriÅŸ verileri. ${errors.join('. ')}`;
    return new ApiError(400, message);
};

/**
 * GeliÅŸtirme ortamÄ± iÃ§in detaylÄ± hata yanÄ±tÄ± gÃ¶nderir.
 * @param {Error} err
 * @param {import('express').Response} res
 */
const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack,
    });
};

/**
 * Ãœretim ortamÄ± iÃ§in genel ve gÃ¼venli hata yanÄ±tÄ± gÃ¶nderir.
 * @param {Error} err
 * @param {import('express').Response} res
 */
const sendErrorProd = (err, res) => {
    // A) Operasyonel, gÃ¼venilir hata: Ä°stemciye mesaj gÃ¶nder
    if (err.isOperational) {
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message,
        });
    // B) Programlama veya bilinmeyen hata: DetaylarÄ± sÄ±zdÄ±rma
    } else {
        // 1) HatayÄ± konsola logla
        console.error('HATA ðŸ’¥', err);
        // 2) Genel bir mesaj gÃ¶nder
        res.status(500).json({
            status: 'error',
            message: 'Sunucuda beklenmedik bir hata oluÅŸtu.',
        });
    }
};

/**
 * Express iÃ§in genel hata yÃ¶netimi middleware'i.
 * Bu middleware, app.js'de en son kaydedilmelidir.
 */
module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (config.env === 'development') {
        sendErrorDev(err, res);
    } else if (config.env === 'production') {
        let error = { ...err, message: err.message };

        if (error.name === 'CastError') error = handleCastErrorDB(error);
        if (error.code === 11000) error = handleDuplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        // JWT hatalarÄ± da burada yakalanabilir (JsonWebTokenError, TokenExpiredError)

        sendErrorProd(error, res);
    }
};